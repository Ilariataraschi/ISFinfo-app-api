const express = require("express");
const router = express.Router();
const Note = require("../models/Note");

// GET tutte le note (con filtro opzionale userId in query)
router.get("/", async (req, res) => {
  try {
    const filter = {};
    if (req.query.userId) {
      filter.userId = req.query.userId;
    }
    const notes = await Note.find(filter);
    res.json(notes);
  } catch (err) {
    res.status(500).json({ error: "Errore durante il recupero delle note" });
  }
});

// POST crea una nuova nota
router.post("/", async (req, res) => {
  try {
    const { userId, title, content } = req.body;

    const newNote = new Note({
      userId,
      title,
      content,
    });

    await newNote.save();

    res.status(201).json(newNote);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// PUT aggiorna una nota per id (passato come parametro)
router.put("/:id", async (req, res) => {
  try {
    const updatedNote = await Note.findByIdAndUpdate(
      req.params.id,
      {
        title: req.body.title,
        content: req.body.content,
      },
      { new: true }
    );

    if (!updatedNote) {
      return res.status(404).json({ message: "Nota non trovata" });
    }

    res.json({
      message: `Nota aggiornata con ID ${req.params.id}`,
      note: updatedNote,
    });
  } catch (error) {
    res.status(500).json({ message: "Errore durante l'aggiornamento", error });
  }
});

// DELETE elimina una nota per id (passato come parametro)
router.delete("/:id", async (req, res) => {
  try {
    const result = await Note.findByIdAndDelete(req.params.id);

    if (!result) {
      return res.status(404).json({ message: "Nota non trovata" });
    }

    res.json({
      message: `Nota eliminata con ID ${req.params.id}`,
    });
  } catch (error) {
    res.status(500).json({ message: "Errore durante l'eliminazione", error });
  }
});

module.exports = router;
